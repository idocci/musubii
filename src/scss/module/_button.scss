//----------------------------------------------------
// Module: Button
//----------------------------------------------------

//----------------------------------------------------
// / Export Setting
//----------------------------------------------------

@mixin export-button {
  @if $use-component-button == true {
    @content;
  }
}

//----------------------------------------------------
// / Basic
//----------------------------------------------------

@include export-button {
  #{$button-class} {
    cursor: pointer;
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    align-self: flex-start;
    white-space: nowrap;
    padding: $button-padding;
    border-radius: $button-border-radius;
    color: $body-text-color;
    line-height: $button-line-height;
    text-align: center;
    transition: $button-transition;
    &.is-strong {
      font-weight: 700;
    }
    &.is-disabled,
    &[disabled] {
      cursor: not-allowed;
    }
    &:focus {
      box-shadow: $button-focus-shadow;
      outline: none;
    }
  }
}

//----------------------------------------------------
// / Custom
//----------------------------------------------------

@include export-button {
  #{$button-class} {
    @each $custom in $pattern-button-custom {
      @if $custom == "angle" {
        &.is-angle-right,
        &.is-angle-left {
          &:after {
            content: "";
            position: absolute;
            top: 50%;
            width: $button-angle-size;
            height: $button-angle-size;
            border-top: $button-angle-border-width
              solid
              $button-angle-border-color;
            border-right: $button-angle-border-width
              solid
              $button-angle-border-color;
            z-index: 2;
          }
        }
        &.is-angle-right {
          &:after {
            right: $button-angle-size * 1.5;
            transform: translateY(-50%) rotate(45deg);
          }
        }
        &.is-angle-left {
          &:after {
            left: $button-angle-size * 1.5;
            transform: translateY(-50%) rotate(-135deg);
          }
        }
        &[class*="is-angle-"] {
          @each $style in $pattern-button-style {
            @if $style == "plain" {
              &.is-plain {
                @each $key, $value in $pattern-button-plain {
                  &.is-#{$key}:after {
                    @extend %angle-border-current-color;
                  }
                }
              }
            }
            @if $style == "outline" {
              &.is-outline {
                @each $key, $value in $pattern-button-outline {
                  &.is-#{$key}:after {
                    @extend %angle-border-current-color;
                  }
                }
              }
            }
            @if $style == "melt" {
              &.is-melt {
                @each $key, $value in $pattern-button-melt {
                  &.is-#{$key}:after {
                    @extend %angle-border-current-color;
                  }
                }
              }
            }
          }
        }
        &%angle-border-current-color {
          border-color: currentColor;
        }
      }
      @if $custom == "round" {
        &.is-round {
          border-radius: $button-round-border-radius;
        }
      }
      @if $custom == "circle" {
        &.is-circle {
          width: $button-circle-width;
          height: $button-circle-height;
          padding: 0;
          border-radius: $button-circle-border-radius;
          line-height: 1;
        }
      }
      @if $custom == "floating" {
        &.is-floating:not(.is-disabled) {
          box-shadow: $button-floating-shadow;
          &:focus,
          &:hover:focus {
            box-shadow: $button-floating-focus-shadow;
          }
          &:hover {
            box-shadow: $button-floating-hover-shadow;
          }
        }
      }
    }
  }
}

//----------------------------------------------------
// / Style
//----------------------------------------------------

@include export-button {
  #{$button-class} {
    @each $style in $pattern-button-style {
      @if $style == "plain" {
        &.is-plain {
          background-color: $button-plain-default-background-color;
          border: $button-border-width solid transparent;
          &:hover {
            background-color: $button-plain-default-hover-background-color;
          }
          @each $key, $value in $pattern-button-plain {
            &.is-#{$key} {
              background-color: map-get($value, background-color);
              color: $button-paint-text-color;
              &:hover {
                background-color: map-get($value, hover-background-color);
              }
            }
          }
          &.is-disabled,
          &.is-disabled:hover,
          &[disabled],
          &[disabled]:hover {
            background-color: $button-disabled-background-color;
            color: $button-disabled-text-color;
          }
        }
      }
      @if $style == "outline" {
        &.is-outline {
          background-color: $button-outline-default-background-color;
          border: $button-border-width
            solid
            $button-outline-default-border-color;
          &:hover {
            background-color: $button-outline-default-hover-background-color;
          }
          @each $key, $value in $pattern-button-outline {
            &.is-#{$key} {
              border-color: map-get($value, border-color);
              color: map-get($value, text-color);
              &:hover {
                background-color: map-get($value, hover-background-color);
                border-color: transparent;
                color: $button-paint-text-color;
              }
            }
          }
          &.is-disabled,
          &.is-disabled:hover,
          &[disabled],
          &[disabled]:hover {
            background-color: $button-disabled-background-color;
            color: $button-disabled-text-color;
          }
        }
      }
      @if $style == "melt" {
        &.is-melt {
          background-color: transparent;
          border: $button-border-width solid transparent;
          &:hover {
            background-color: $button-melt-default-hover-background-color;
          }
          @each $key, $value in $pattern-button-melt {
            &.is-#{$key} {
              color: map-get($value, text-color);
            }
          }
          &.is-disabled,
          &.is-disabled:hover,
          &[disabled],
          &[disabled]:hover {
            color: $button-disabled-text-color;
            background-color: transparent;
          }
        }
      }
    }
  }
}
